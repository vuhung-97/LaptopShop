@model IEnumerable<LaptopShop.ViewModels.LaptopViewModel>
@{
    ViewData["Title"] = "Index";
    Layout = "_DanhSachLaptopLayout";
}
<div class="card border-0 shadow-sm mb-4">
    <div class="card-body">
        <div class="d-flex align-items-center justify-content-between mb-4">
            <div class="col-4">
                <h2 class="font-weight-bold mb-2 " style="white-space: nowrap;">Kết quả tìm kiếm:</h2>
                <span class="badge badge-primary rounded-pill px-3 py-2 font-weight-normal">
                    <i class="fa fa-laptop mr-1"></i> Tìm thấy <b>@Model.Count()</b> sản phẩm
                </span>
            </div>
            <div class="d-flex align-items-center">
                <div class="dropdown mr-3">
                    <button class="btn btn-sm btn-outline-primary dropdown-toggle" type="button" id="sortDropdown" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                        <i class="fa fa-sort mr-1"></i> Sắp xếp theo
                    </button>
                    <div class="dropdown-menu dropdown-menu-right shadow-sm border-0" aria-labelledby="sortDropdown">
                        <a class="dropdown-item" href="#" data-sort="desc">
                            <i class="fa fa-sort-amount-down mr-2"></i> Giá: Cao đến thấp
                        </a>
                        <a class="dropdown-item" href="#" data-sort="asc">
                            <i class="fa fa-sort-amount-up mr-2"></i> Giá: Thấp đến cao
                        </a>
                    </div>
                </div>
                <div class="dropdown">
                    <button class="btn btn-sm btn-outline-primary dropdown-toggle" type="button" id="showingDropdown" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                        <i class="fa fa-list mr-1"></i> Hiển thị: 10
                    </button>
                    <div style="z-index:1000;" class="dropdown-menu dropdown-menu-right shadow-sm border-0" aria-labelledby="showingDropdown">
                        <a class="dropdown-item" href="#" data-value="10">10 sản phẩm</a>
                        <a class="dropdown-item" href="#" data-value="20">20 sản phẩm</a>
                        <a class="dropdown-item" href="#" data-value="0">Tất cả</a>
                    </div>

                </div>
            </div>
        </div>
    </div>
</div>

<div id="pagination"></div>
<div class="row product-list">
    @await Html.PartialAsync("LaptopItem", Model)
</div>


<script>
        // Tạo phân trang cho danh sách sản phẩm
    const products = @Html.Raw(Json.Serialize(Model));
    let productsPerPage = 12; // Mặc định
    let currentPage = 1;
    let currentSortOrder = "";

    // Hiển thị sản phẩm theo trang
    function displayProducts(page) {
        currentPage = page;

        const productElements = document.querySelectorAll('.product-list .col-lg-4.col-md-6.col-sm-6');
        const totalProducts = productElements.length;

        productElements.forEach((product, index) => {
            const start = (page - 1) * productsPerPage;
            const end = productsPerPage === 0 ? totalProducts : start + productsPerPage;

            if (index >= start && index < end) {
                product.style.display = 'block';
            } else {
                product.style.display = 'none';
            }
        });

        updatePaginationButtons();
    }

    // Tạo nút phân trang
    function setupPagination() {
        const productElements = document.querySelectorAll('.product-list .col-lg-4.col-md-6.col-sm-6');
        const totalProducts = productElements.length;
        const pageCount = productsPerPage === 0 ? 1 : Math.ceil(totalProducts / productsPerPage);
        const pagination = document.getElementById('pagination');

        pagination.innerHTML = '';

        //if (pageCount <= 1) return;

        const paginationContainer = document.createElement('div');
        paginationContainer.className = 'container mt-4';

        const paginationRow = document.createElement('div');
        paginationRow.className = 'row';

        const paginationCol = document.createElement('div');
        paginationCol.className = 'col-6 offset-3 d-flex justify-content-center';

        const paginationNav = document.createElement('nav');
        paginationNav.setAttribute('aria-label', 'Phân trang');

        const paginationUl = document.createElement('ul');
        paginationUl.className = 'pagination';

        // Previous
        const prevLi = document.createElement('li');
        prevLi.className = 'page-item' + (currentPage === 1 ? ' disabled' : '');

        const prevLink = document.createElement('a');
        prevLink.className = 'page-link';
        prevLink.href = '#';
        prevLink.innerHTML = '<span aria-hidden="true">&laquo;</span>';
        prevLink.onclick = (e) => {
            e.preventDefault();
            if (currentPage > 1) displayProducts(currentPage - 1);
        };

        prevLi.appendChild(prevLink);
        paginationUl.appendChild(prevLi);

        // Page numbers
        for (let i = 1; i <= pageCount; i++) {
            const li = document.createElement('li');
            li.className = 'page-item' + (i === currentPage ? ' active' : '');

            const a = document.createElement('a');
            a.className = 'page-link';
            a.href = '#';
            a.textContent = i;
            a.onclick = (e) => {
                e.preventDefault();
                displayProducts(i);
            };

            li.appendChild(a);
            paginationUl.appendChild(li);
        }

        // Next
        const nextLi = document.createElement('li');
        nextLi.className = 'page-item' + (currentPage === pageCount ? ' disabled' : '');

        const nextLink = document.createElement('a');
        nextLink.className = 'page-link';
        nextLink.href = '#';
        nextLink.innerHTML = '<span aria-hidden="true">&raquo;</span>';
        nextLink.onclick = (e) => {
            e.preventDefault();
            if (currentPage < pageCount) displayProducts(currentPage + 1);
        };

        nextLi.appendChild(nextLink);
        paginationUl.appendChild(nextLi);

        paginationNav.appendChild(paginationUl);
        paginationCol.appendChild(paginationNav);
        paginationRow.appendChild(paginationCol);
        paginationContainer.appendChild(paginationRow);
        pagination.appendChild(paginationContainer);
    }

    // Cập nhật trạng thái phân trang
    function updatePaginationButtons() {
        const productElements = document.querySelectorAll('.product-list .col-lg-4.col-md-6.col-sm-6');
        const pageCount = productsPerPage === 0 ? 1 : Math.ceil(productElements.length / productsPerPage);
        const pageItems = document.querySelectorAll('.pagination .page-item');

        if (pageItems.length === 0) return;

        pageItems[0].className = 'page-item' + (currentPage === 1 ? ' disabled' : '');

        for (let i = 1; i <= pageCount; i++) {
            if (i < pageItems.length - 1) {
                pageItems[i].className = 'page-item' + (i === currentPage ? ' active' : '');
            }
        }

        if (pageItems.length > 1) {
            pageItems[pageItems.length - 1].className = 'page-item' + (currentPage === pageCount ? ' disabled' : '');
        }
    }

    // Xử lý sự kiện khi click vào dropdown "Hiển thị"
    document.querySelectorAll('#showingDropdown + .dropdown-menu a').forEach(item => {
        item.addEventListener('click', function (e) {
            e.preventDefault();
            productsPerPage = parseInt(this.getAttribute('data-value'));
            currentPage = 1;

            // Cập nhật text button
            document.getElementById('showingDropdown').innerHTML = `<i class="fa fa-list mr-1"></i> Hiển thị: ${productsPerPage === 0 ? 'Tất cả' : productsPerPage}`;

            // Cập nhật class active cho dropdown item
            document.querySelectorAll('#showingDropdown + .dropdown-menu a').forEach(a => a.classList.remove('active'));
            this.classList.add('active');

            setupPagination();
            displayProducts(1);
        });
    });

    // Khởi tạo khi trang được tải
    document.addEventListener('DOMContentLoaded', function() {
        const productElements = document.querySelectorAll('.product-list .col-lg-4.col-md-6.col-sm-6');
        productElements.forEach(product => {
            product.style.display = 'block';
        });

        setupPagination();
        displayProducts(1);
    });
    document.querySelectorAll('#sortDropdown + .dropdown-menu a').forEach(item => {
        item.addEventListener('click', function (e) {
            e.preventDefault();
            currentSortOrder = this.getAttribute('data-sort');
            sortAndDisplayProducts();
        });
    });
        function sortAndDisplayProducts() {
        // Sắp xếp products theo giá bán
        if (currentSortOrder === "asc") {
            products.sort((a, b) => a.GiaBan - b.GiaBan);
        } else if (currentSortOrder === "desc") {
            products.sort((a, b) => b.GiaBan - a.GiaBan);
        }

        // Cập nhật lại product-list
        const productContainer = document.querySelector('.product-list');
        productContainer.innerHTML = ''; // Xóa hết sản phẩm cũ

        // Tạo lại các sản phẩm theo thứ tự mới
        products.forEach(product => {
            const productHtml = `
                <div class="col-lg-4 col-md-6 col-sm-6 mb-4">
                    <div class="card shadow-sm border-0 rounded">
                        <img src="${product.HinhAnh}" class="card-img-top" alt="${product.TenLapTop}">
                        <div class="card-body">
                            <h5 class="card-title">${product.TenLapTop}</h5>
                            <p class="card-text">Giá: ${product.GiaBan.toLocaleString()} đ</p>
                        </div>
                    </div>
                </div>
            `;
            productContainer.insertAdjacentHTML('beforeend', productHtml);
        });

        // Reset và cập nhật lại phân trang
        setupPagination();
        displayProducts(1);
    }
        document.querySelectorAll('#sortDropdown + .dropdown-menu a').forEach(item => {
        item.addEventListener('click', function (e) {
            e.preventDefault();
            const sortOrder = this.getAttribute('data-sort');   

            fetch(`/Shop/SortProduct?sortOrder=${sortOrder}`)
                .then(response => response.text())
                .then(html => {
                    document.querySelector('.product-list').innerHTML = html;
                    setupPagination();  // nếu cần phân trang lại
                    displayProducts(1);
                })
                .catch(error => console.error('Error:', error));
        });
    });

</script>

